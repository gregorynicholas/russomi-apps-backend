# Main app configuration.
# See http://code.google.com/appengine/docs/python/config/appconfig.html

application: replace-with-real-app-id

# e.g. make update -V myver
version: use-version-args

runtime: python27
api_version: 1

# make sure app code is threadsafe if enabled.
threadsafe: yes

# Defaul expiration time. If omitted, the production server sets the expiration to 10 minutes.
default_expiration: "7d"

# The Python 2.7 runtime includes some additional third-party modules and makes them available on demand.
# http://code.google.com/appengine/docs/python/tools/libraries27.html
#
# See this on how to configure libraries:
# http://code.google.com/appengine/docs/python/python27/using27.html#Configuring_Libraries
#
# When adding jinja2 to your library configuration, you may want to add markupsafe and setuptools as well. 
# markupsafe improves the performance of template rendering in jinja2 and setuptools is required 
# for some template loading functionality.
libraries:
- name: markupsafe
  version: latest
- name: jinja2
  version: latest
- name: webapp2
  version: "2.5.2"
# - name: setuptools
#   version: "0.6c11"


builtins:
# Redirects calls to /_ah/admin from the development console of the development web server 
# to the Admin Console dashboard page.
  - admin_redirect: on

# Enables Appstats at /_ah/stats/
# See http://code.google.com/appengine/docs/python/tools/appstats.html
#
# In order to use App Stats, you also need to Install the Event Recorder
# http://code.google.com/appengine/docs/python/tools/appstats.html#Installing_the_Event_Recorder
  - appstats: on

# Enables the deferred handler at /_ah/queue/deferred
# This allows to use deferred.defer() to simplify the creation of Task Queue tasks. 
# Also see Background work with the deferred library http://code.google.com/appengine/articles/deferred.html
  - deferred: on

# Enables Remote API at /_ah/remote_api/
# See http://code.google.com/appengine/docs/python/tools/uploadingdata.html#Setting_Up_remote_api
  - remote_api: on


inbound_services:
# http://code.google.com/appengine/docs/python/channel/overview.html#Tracking_Client_Connections_and_Disconnections
# - channel_presence

# http://code.google.com/appengine/docs/python/mail/receivingmail.html
# - mail

# http://code.google.com/appengine/docs/adminconsole/instances.html#Warmup_Requests
# - warmup

# http://code.google.com/appengine/docs/python/xmpp/overview.html#Handling_Incoming_Calls
# - xmpp_message 
# Allows the app to receive a user's chat presence
# - xmpp_presence
# Allows the app to receive user subscription POSTs
# - xmpp_subscribe


# A list of URL patterns and descriptions of how they should be handled. 
# App Engine can handle URLs by executing application code, or by serving static files uploaded with the code, 
# such as images, CSS or JavaScript.
#
# See http://code.google.com/appengine/docs/python/config/appconfig.html#Script_Handlers
# and http://code.google.com/appengine/docs/python/config/appconfig.html#Static_File_Handlers

handlers:
# A URL prefix. This value uses regular expression syntax (and so regexp special characters must be escaped), 
# but it should not contain groupings. All URLs that begin with this prefix are handled by this handler, 
# using the portion of the URL after the prefix as part of the file path.
# Reserved URLs (you can't use them): 
#   /_ah/
#   /form
#
# - url: /posts.*
#   script: posts.app   # Specifies the WSGI application (Python 2.7 only)
#   login: required     # Optional.
#                       #   required - once the user has signed in, the handler proceeds normally.
#                       #   admin    - once the user has signed in, the handler checks whether the user is an administrator 
#                       #              for the application. If not, the user is given an error message. 
#                       #              If the user is an administrator, the handler proceeds.
#   secure: optional    # Optional.
#                       #   optional - Both HTTP and HTTPS requests with URLs that match the handler succeed without redirects.
#                       #              The application can examine the request to determine which protocol was used, 
#                       #              and respond accordingly. This is the default when secure is not provided for a handler.
#                       #   never    - Requests for a URL that match this handler that use HTTPS are automatically redirected 
#                       #              to the HTTP equivalent URL.
#                       #   always   - Requests for a URL that match this handler that do not use HTTPS are automatically 
#                       #              redirected to the HTTPS URL with the same path. Query parameters are preserved 
#                       #              for the redirect. 

- url: /(favicon\.ico|apple-touch-icon.*\.png)
  mime_type: image/png
  static_files: static/\1
  upload: static/(favicon\.ico|apple-touch-icon.*\.png)

- url: /(css|js|img)/(.*)
  static_files: static/\1/\2
  upload: static/(css|js|img)/(.*)

- url: /(robots\.txt|humans\.txt|crossdomain\.xml|.+\.html)
  static_files: static/\1
  upload: static/(robots\.txt|humans\.txt|crossdomain\.xml|.+\.html)


# Dynamic handlers

- url: /.*
  script: main.app


# Files in your application directory whose paths match a static_dir path or a static_files upload path 
# are considered to be static files. All other files in the application directory are considered 
# to be application program and data files.
# 
# The skip_files element specifies which files in the application directory are not to be uploaded 
# to App Engine. The value is either a regular expression, or a list of regular expressions. 
# Any filename that matches any of the regular expression is omitted from the list of files to upload 
# when the application is uploaded.
#skip_files:
#- ^(.*/)?#.*#
#- ^(.*/)?.*~
#- ^(.*/)?.*\.py[co]
#- ^(.*/)?.*/RCS/.*
#- ^(.*/)?\..*
#- ^(.*/)?.*\.bak$
#- ^(.*/)?Makefile
#- ^(.*/)?.*\.gss
#- ^(.*/)?.*\.soy
#- templates/soy
#- assets/js/soyutils_usegoog\.js
#- assets/js/deps\.js
#- assets/js/closure-lib
#- assets/js/notepad$
#- assets/.*_tests?
#- requirements\.txt
#- tests.*
#- docs
#- htmlcov
#- tmp
#- babel.*\.cfg
#- locale/messages\..*
#- locale/.*/messages\.(po|xtb)
#- .*\.(templ|template|example)$